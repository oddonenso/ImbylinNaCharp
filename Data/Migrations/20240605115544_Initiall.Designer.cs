// <auto-generated />
using System;
using Data.Table;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(Connection))]
    [Migration("20240605115544_Initiall")]
    partial class Initiall
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Table.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LocationID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Country");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("Latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("Longitude");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Data.Table.WeatherData", b =>
                {
                    b.Property<int>("WeatherDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("WeatherDataID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeatherDataID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<decimal>("Humidity")
                        .HasColumnType("numeric")
                        .HasColumnName("Humidity");

                    b.Property<int>("LocationID")
                        .HasColumnType("integer")
                        .HasColumnName("LocationID");

                    b.Property<decimal>("Pressure")
                        .HasColumnType("numeric")
                        .HasColumnName("Pressure");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("numeric")
                        .HasColumnName("Temperature");

                    b.Property<int>("WeatherTypeID")
                        .HasColumnType("integer")
                        .HasColumnName("WeatherTypeID");

                    b.HasKey("WeatherDataID");

                    b.HasIndex("LocationID");

                    b.HasIndex("WeatherTypeID");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Data.Table.WeatherType", b =>
                {
                    b.Property<int>("WeatherTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("WeatherTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WeatherTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Description");

                    b.HasKey("WeatherTypeID");

                    b.ToTable("WeatherTypes");
                });

            modelBuilder.Entity("Data.Table.WeatherData", b =>
                {
                    b.HasOne("Data.Table.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Table.WeatherType", "WeatherType")
                        .WithMany()
                        .HasForeignKey("WeatherTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("WeatherType");
                });
#pragma warning restore 612, 618
        }
    }
}
